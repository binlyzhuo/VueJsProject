
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index4</title>
    <script type="text/javascript" src="~/Scripts/jquery-3.0.0.min.js"></script>
    <script type="text/javascript" src="~/Scripts/vue.js"></script>
    <script type="text/javascript" src="~/Scripts/lodash.min.js"></script>
    <script type="text/javascript" src="~/Scripts/axios.min.js"></script>
</head>
<body>
<div>
    <div id="app">
        <ol>
            <todo-item v-for="item in groceryList" v-bind:todo="item" v-bind-key="item.id"></todo-item>
        </ol>
    </div>
</div>

<div id="example">
    <p>original message:"{{message}}"</p>
    <p>Computed reversed message:"{{reversedMessage}}"</p>
</div>
<div id="demo">{{fullName}}</div>
<div id="watch-example">
    <p>Ask a yes/no question:<input v-model="question"/></p>
    <p>{{answer}}</p>
</div>
<script type="text/javascript">
    Vue.component("todo-item",
        {
            props:['todo'],
            template:'<li>{{todo.text}}</li>'
        });

    var v1 = new Vue({
        el: "#app",
        data: {
            groceryList: [
                { id: 0, text: "蔬菜" },
                {id:1,text:'奶酪'}
                ]
        }, created: function() {
            console.log(this.groceryList.length);
        }, beforeCreate: function() {
            console.log('before create');
        }
    });

    var vm = new Vue({
        el: "#example",
        data: { message: 'hello' },
        computed: { reversedMessage: function () { return this.message.split('').reverse().join(''); }}
    });

    var v3 = new Vue({
        el: "#demo",
        data: {
            firstName: 'Foo001',
            lastName: 'Bar002'
            
        },
        computed: {
            fullName: function() {
                return this.firstName + ' ' + this.lastName;
            }
        }
    });

    var sw = new Vue({
        el: '#watch-example',
        data: {
            question: '',
            answer:'I cannot give you an answer until you ask a question!'
        },
        watch: {
            question: function(newQuestion, oldQuestion) {
                this.answer = "Waiting for you to stop typing...";
                this.debouncedGetAnswer();
            }
        },
        created: function() {
            this.debouncedGetAnswer = _.debounce(this.getAnswer,500);
        },
        methods: {
            getAnswer: function() {
                if (this.question.indexOf('?') === -1) {
                    this.answer = 'Questions usually contain a question mark.';
                    return;
                }

                this.answer = 'Thinking...';
                var sw2 = this;
                axios.get('https://yesno.wtf/api').then(function(response) {
                    sw2.answer = _.capitalize(response.data.answer);
                }).catch(function(err) {
                    sw2.answer = 'Error!Could not reach the api.'+err;
                });
            }
        }
    });
    </script>
</body>
</html>
